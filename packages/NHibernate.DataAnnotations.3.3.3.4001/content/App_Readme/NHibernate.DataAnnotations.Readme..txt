
IMPORTANT: I strongly suggest that you always use a transaction in your unit of work (ISession).  The validator will
flush the NH ISession to perform validation, so you should be prepared to rollback changes if the session is not valid.
This design choice was based on the requirement to keep the session usable from within IValidatableObject.Validate().
If the NH flush was allowed to trigger validation, recurrsion leading to a stack overflow could result. It seems a little 
off to allow changes to be persisted before validation, but this actually works quite well in a DDD context.  The only 
concern is whether to commit or rollback changes based on the validation state of the model.


//add the session interceptor to any session you want to plugin to data annotations validation
var session = _sessionFactory.OpenSession(new ValidationInterceptor());

//access the validator at any time via the ISession extension method
var validator = session.GetValidator();

//the validator's simple API
/// <summary>
/// Runs validation on all modified entities in the session.  
/// Commits the transaction if there are no validation errors, otherwise rollsback.
/// </summary>
/// <param name="transaction">The ITransaction object</param>
/// <param name="throwException">True to throw a ValidationException if errors exist</param>
void Eval(ITransaction transaction, bool throwException = true);

/// <summary>
/// Runs validation on all modified entities in the session.
/// </summary>
/// <returns>True, if no errors</returns>
bool IsValid();

/// <summary>
/// Get a string of the concatenated error messages.
/// </summary>
/// <returns>string</returns>
string GetValidationErrorString();

/// <summary>
/// Throw a ValidationException with a message of the validation error string.
/// </summary>
void ThrowValidationException();

/// <summary>
/// Runs validation on all modified entities in the session.
/// </summary>
/// <returns>Dictionary of entities with validation errors</returns>
IDictionary<object, ReadOnlyCollection<ValidationResult>> GetValidationResults();

/// <summary>
/// Runs validation on all modified entities in the session.
/// </summary>
/// <param name="o">The entity to inspect</param>
/// <returns>validation errors</returns>
ReadOnlyCollection<ValidationResult> GetValidationResults(object o);

